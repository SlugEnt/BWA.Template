@using System.Reflection
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />

    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link href="_content/CodeBeam.MudBlazor.Extensions/MudExtensions.min.css" rel="stylesheet" />

    <!--<link href="@(Assembly.GetExecutingAssembly().GetName().Name + ".styles.css")" rel="stylesheet"/>  -->
    <ImportMap />
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet @rendermode="InteractiveAuto" />
</head>

<body>
    <!--<Routes at rendermode="InteractiveAuto"/>-->

    <Routes @rendermode=RenderModeForPage />
    <!-- <Routes rendermode= "InteractiveAuto"/>-->
    <script src="_framework/blazor.web.js"></script>


    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    <script src="_content/CodeBeam.MudBlazor.Extensions/MudExtensions.min.js"></script>

    <environment names="Development">
        <script src="_framework/aspnetcore-browser-refresh.js"></script>
    </environment>
</body>

</html>


@code
{
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;



    /// <summary>
    /// Allows the page to determine what render mode it wants to be in.  Useful for setting Server side.
    /// </summary>
    /// <param name="pathString"></param>
    /// <returns></returns>
    private IComponentRenderMode? GetRenderMode2(PathString pathString)
    {
        // NULL indicates we should go with the render mode defined on the page.
        IComponentRenderMode defaultMode = InteractiveWebAssembly;
        IComponentRenderMode? renderMode = defaultMode;

        // Override default when necessary
        switch (pathString.Value)
        {
            case "/personoverview":
                renderMode = null;
                break;
            case "/newemployee":
                renderMode = InteractiveServer;
                break;
            default:
                renderMode = defaultMode;
                break;
        }

        return renderMode;
    }



    private IComponentRenderMode? RenderModeForPage => GetRenderMode2(HttpContext.Request.Path);

}
